{"version":3,"sources":["components/penny.png","components/nickel.png","components/dime.png","components/quarter.png","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","Buycoins","props","hidden","onClick","label","value","Icon","src","link","width","height","App","state","pennies","nickels","dimes","quarters","hideNickels","hideDimes","hideQuarters","total","coin","newState","this","console","log","setState","amount","className","Header","title","toFixed","increment_coins","update_total","penny","nickel","dime","quarter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gQCU3C,SAASC,EAASC,GAChB,OAAIA,EAAMC,OACC,KAIT,4BAAQC,QAAW,WACjBF,EAAME,YACAF,EAAMG,MAFd,KAEuBH,EAAMI,OAGjC,SAASC,EAAKL,GACZ,OAAIA,EAAMC,OACC,KAIT,yBAAKK,IAAKN,EAAMO,KAAMC,MAAOR,EAAMQ,MAAOC,OAAQT,EAAMS,S,IA2G7CC,E,kDAtGb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CAAEC,QAAS,EAAGC,QAAS,EAAGC,MAAO,EAAGC,SAAU,EAAGC,aAAa,EAAOC,WAAW,EAAOC,cAAc,EAAOC,MAAO,GAFpH,E,4DAIEC,GACd,IAAMC,EAAW,GACjBA,EAASD,GAAQE,KAAKX,MAAMS,GAAQ,EACpCG,QAAQC,IAAIH,GACZC,KAAKG,SAASJ,K,mCAEHK,GAAS,IACfP,EAASG,KAAKX,MAAdQ,MACLA,GAASO,EACTJ,KAAKG,SAAS,CAACN,Y,+BAEP,IAAD,SAC4CG,KAAKX,MAAjDC,EADA,EACAA,QAASC,EADT,EACSA,QAASC,EADlB,EACkBA,MAAiBK,GADnC,EACyBJ,SADzB,EACmCI,OAC1C,OACE,6BACE,4BAAQQ,UAAU,cAClB,kBAACC,EAAD,CAAQC,MAAK,6BAAwBV,EAAMW,QAAQ,MAGnD,yBAAKH,UAAU,WAEb,4BAAQzB,QAAW,WACjB,EAAK6B,gBAAgB,WACrB,EAAKC,aAAa,OAFpB,YAIaV,KAAKX,MAAMC,SAIxB,kBAACb,EAAD,CACEI,MAAQ,cACRF,OAAQqB,KAAKX,MAAMK,YACnBd,QAAS,WAELiB,GAAS,MACX,EAAKa,cAAc,KACnB,EAAKP,SAAS,CAACT,aAAa,EAAMJ,gBAGtC,kBAACb,EAAD,CACEI,MAAQ,UACRC,MAASkB,KAAKX,MAAME,QACpBZ,QAASqB,KAAKX,MAAMK,YACpBd,QAAS,WACT,EAAKuB,SAAS,CAACZ,QAAU,EAAKF,MAAME,QAAU,IAC9C,EAAKmB,aAAa,QAGpB,kBAACjC,EAAD,CACEI,MAAQ,YACRF,OAAQqB,KAAKX,MAAMM,UACnBf,QAAS,WACLiB,GAAS,OACX,EAAKa,cAAc,MACnB,EAAKP,SAAS,CAACR,WAAW,EAAMJ,gBAGpC,kBAACd,EAAD,CACEI,MAAQ,QACRC,MAASkB,KAAKX,MAAMG,MACpBb,QAASqB,KAAKX,MAAMM,UACpBf,QAAS,WACT,EAAKuB,SAAS,CAACX,MAAQ,EAAKH,MAAMG,MAAQ,IAC1C,EAAKkB,aAAa,OAGpB,kBAACjC,EAAD,CACEI,MAAQ,eACRF,OAAQqB,KAAKX,MAAMO,aACnBhB,QAAS,WACLiB,GAAS,MACX,EAAKa,cAAc,KACnB,EAAKP,SAAS,CAACP,cAAc,EAAMJ,cAGvC,kBAACf,EAAD,CACEI,MAAQ,WACRC,MAASkB,KAAKX,MAAMI,SACpBd,QAASqB,KAAKX,MAAMO,aACpBhB,QAAS,WACT,EAAKuB,SAAS,CAACV,SAAW,EAAKJ,MAAMI,SAAW,IAChD,EAAKiB,aAAa,SAItB,yBAAKL,UAAU,SAEb,kBAACtB,EAAD,CAAME,KAAM0B,IAAOhC,QAAQ,EAAO0B,UAAU,QAAQnB,MAAM,MAAMC,OAAO,QACvE,kBAACJ,EAAD,CAAME,KAAM2B,IAAQjC,QAASqB,KAAKX,MAAMK,YAAaW,UAAU,SAASnB,MAAM,MAAMC,OAAO,QAC3F,kBAACJ,EAAD,CAAME,KAAM4B,IAAMlC,QAASqB,KAAKX,MAAMM,UAAWU,UAAU,OAAOnB,MAAM,MAAMC,OAAO,QACrF,kBAACJ,EAAD,CAAME,KAAM6B,IAASnC,QAASqB,KAAKX,MAAMO,aAAcS,UAAU,UAAUnB,MAAM,MAAMC,OAAO,e,GA/FtF4B,IAAMC,WAyGxB,SAASV,EAAO5B,GACd,OACE,4BAAKA,EAAM6B,OC9HKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.bb01427a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/penny.abf66295.png\";","module.exports = __webpack_public_path__ + \"static/media/nickel.ea29a2a0.png\";","module.exports = __webpack_public_path__ + \"static/media/dime.1e2a5bf0.png\";","module.exports = __webpack_public_path__ + \"static/media/quarter.f4c7696d.png\";","import React from 'react';\nimport './App.css';\nimport penny from './penny.png';\nimport nickel from './nickel.png';\nimport dime from './dime.png';\nimport quarter from './quarter.png'\n\n\n\n// import Clicker from './clicker'\nfunction Buycoins(props) {\n  if (props.hidden) {\n    return ( null\n    )\n  }\n  return (\n    <button onClick = {() => { \n      props.onClick()\n        }}>{props.label}: {props.value}</button>\n  )\n}\nfunction Icon(props) {\n  if (props.hidden) {\n    return ( null\n    )\n  }\n  return (\n    <img src={props.link} width={props.width} height={props.height}/>\n  )\n}\n\nclass App extends React.Component{\n  constructor() {\n    super()\n    this.state = { pennies: 0, nickels: 0, dimes: 0, quarters: 0, hideNickels: false, hideDimes: false, hideQuarters: false, total: 0}\n  }\n  increment_coins(coin) {\n    const newState = {}\n    newState[coin] = this.state[coin] + 1\n    console.log(newState)\n    this.setState(newState)\n  }\n  update_total(amount) {\n    let {total} = this.state\n    total += amount\n    this.setState({total})\n  }\n  render() {\n    const {pennies, nickels, dimes, quarters, total} = this.state\n    return (\n      <div>\n        <header className=\"App-header\">\n        <Header title={`Currency Clicker: $${total.toFixed(2)}`}/>\n        {/* <Header title={`Currency Clicker: $${this.total}`}/> */}\n\n        <div className=\"FlexBox\">\n\n          <button onClick = {() => {\n            this.increment_coins('pennies')\n            this.update_total(0.01)\n\n          }}>Pennies: {this.state.pennies}</button>\n        \n\n\n          <Buycoins \n            label = \"Buy Nickels\"\n            hidden={this.state.hideNickels} \n            onClick={() => {\n            // const pennies = this.state.pennies - 25\n            if (total >= 0.25) {\n              this.update_total(-0.25)\n              this.setState({hideNickels: true, pennies})\n            }\n          }}/>\n          <Buycoins \n            label = 'Nickels'\n            value = {this.state.nickels}\n            hidden={!this.state.hideNickels}\n            onClick={() => {\n            this.setState({nickels : this.state.nickels + 1})\n            this.update_total(0.05)\n          }}/>\n\n          <Buycoins \n            label = \"Buy Dimes\"\n            hidden={this.state.hideDimes} \n            onClick={() => {\n            if (total >= 1.25) {\n              this.update_total(-1.25)\n              this.setState({hideDimes: true, nickels})\n            }\n          }}/>\n          <Buycoins \n            label = 'Dimes'\n            value = {this.state.dimes}\n            hidden={!this.state.hideDimes}\n            onClick={() => {\n            this.setState({dimes : this.state.dimes + 1})\n            this.update_total(0.10)\n          }}/>\n\n          <Buycoins \n            label = \"Buy Quarters\"\n            hidden={this.state.hideQuarters} \n            onClick={() => {\n            if (total >= 2.50) {\n              this.update_total(-2.50)\n              this.setState({hideQuarters: true, dimes})\n            }\n          }}/>\n          <Buycoins \n            label = 'Quarters'\n            value = {this.state.quarters}\n            hidden={!this.state.hideQuarters}\n            onClick={() => {\n            this.setState({quarters : this.state.quarters + 1})\n            this.update_total(0.25)\n\n          }}/>\n        </div>\n        <div className=\"Coins\">\n  \n          <Icon link={penny} hidden={false} className=\"Penny\" width=\"157\" height=\"157\"/>\n          <Icon link={nickel} hidden={!this.state.hideNickels} className=\"nickel\" width=\"175\" height=\"175\"/>\n          <Icon link={dime} hidden={!this.state.hideDimes} className=\"dime\" width=\"147\" height=\"147\"/>\n          <Icon link={quarter} hidden={!this.state.hideQuarters} className=\"quarter\" width=\"200\" height=\"200\"/>\n        </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\nfunction Header(props) {\n  return (\n    <h1>{props.title}</h1>\n  )\n}\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}